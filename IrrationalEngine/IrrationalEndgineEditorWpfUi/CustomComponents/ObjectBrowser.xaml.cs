using IrrationalEngineCore.Core.Entities.Abstractions;
using IrrationalEngineCore.Core.SceneObjectComponents;
using IrrationalEngineEditor.Implementations.ViewModels;
using IrrationalEngineEditor.Interfaces.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;

namespace IrrationalEndgineEditorWpfUi.CustomComponents
{
    /// <summary>
    /// Interaction logic for ObjectBrowser.xaml
    /// </summary>
    public partial class ObjectBrowser : UserControl
    {
        private readonly IObjectBrowserViewModel _objectBrowserViewModel;
        private ISceneObjectComponent _lastSelectedSceneObjectComponent;
        public ObjectBrowser()
        {
            InitializeComponent();
           
            _objectBrowserViewModel = App.ServiceProvider.GetService<IObjectBrowserViewModel>();
            _objectBrowserViewModel.UpdateTreeViewHandler += ReloadTreeView;
        }

        public void ReloadTreeView(object o, EventArgs e)
        {
            if (_objectBrowserViewModel.Items != null)
            { 
                foreach (ISceneObject sceneObject in _objectBrowserViewModel.Items)
                {
                    TreeViewItem item = new TreeViewItem();
                    item.Header = sceneObject.Name;
                    item.ItemsSource = sceneObject.components.Select(c=>c.Key).ToList();
                    TreeViewObjects.Items.Add(item);
                }
            }
        }

        private void TreeViewItem_OnItemSelected(object sender, RoutedEventArgs e)
        {
            TreeViewObjects.Tag = e.OriginalSource;
            TreeViewItem tvi = TreeViewObjects.Tag as TreeViewItem;
            TreeViewItem parentItem = GetSelectedTreeViewItemParent(tvi);
            ISceneObject sceneObject = null;
            if (parentItem!=null)
            {
                sceneObject = _objectBrowserViewModel.Items.Where(i => i.Name == parentItem.Header.ToString()).FirstOrDefault();
            }
            
            if (sceneObject != null)
            {
             


                PropertiesGrid.ItemsSource = new SceneObjectComponentsList(sceneObject.components.Where(c => c.Key == tvi.DataContext.ToString()).Select(c => c.Value).ToList());
            }
        }

        private TreeViewItem GetSelectedTreeViewItemParent(TreeViewItem item)
        {
            DependencyObject parent = VisualTreeHelper.GetParent(item);
            while (!(parent is TreeViewItem || parent is TreeView))
            {
                parent = VisualTreeHelper.GetParent(parent);
            }

            return parent as TreeViewItem;
        }

        private void PropertiesGridScrollViewer_Loaded(object sender, RoutedEventArgs e)
        {
            // Add MouseWheel support for the datagrid scrollviewer.
            PropertiesGrid.AddHandler(MouseWheelEvent, new RoutedEventHandler(DataGridMouseWheelHorizontal), true);
        }

        private void DataGridMouseWheelHorizontal(object sender, RoutedEventArgs e)
        {
            MouseWheelEventArgs eargs = (MouseWheelEventArgs)e;
            double x = eargs.Delta;
            double y = PropertiesGridScrollViewer.VerticalOffset;
            PropertiesGridScrollViewer.ScrollToVerticalOffset(y - x);
        }

        private void PropertiesGrid_AutoGeneratedColumns(object sender, System.EventArgs e)
        {
            TransformGroup transformGroup = new TransformGroup();
            transformGroup.Children.Add(new RotateTransform(90));
            foreach (DataGridColumn dataGridColumn in PropertiesGrid.Columns)
            {
                if (dataGridColumn is DataGridTextColumn)
                {
                    DataGridTextColumn dataGridTextColumn = dataGridColumn as DataGridTextColumn;

                    Style style = new Style(dataGridTextColumn.ElementStyle.TargetType, dataGridTextColumn.ElementStyle.BasedOn);
                    style.Setters.Add(new Setter(MarginProperty, new Thickness(0, 2, 0, 2)));
                    style.Setters.Add(new Setter(LayoutTransformProperty, transformGroup));
                    style.Setters.Add(new Setter(HorizontalAlignmentProperty, HorizontalAlignment.Center));

                    Style editingStyle = new Style(dataGridTextColumn.EditingElementStyle.TargetType, dataGridTextColumn.EditingElementStyle.BasedOn);
                    editingStyle.Setters.Add(new Setter(MarginProperty, new Thickness(0, 2, 0, 2)));
                    editingStyle.Setters.Add(new Setter(LayoutTransformProperty, transformGroup));
                    editingStyle.Setters.Add(new Setter(HorizontalAlignmentProperty, HorizontalAlignment.Center));

                    dataGridTextColumn.ElementStyle = style;
                    dataGridTextColumn.EditingElementStyle = editingStyle;
                }
            }
            List<DataGridColumn> dataGridColumns = new List<DataGridColumn>();
            foreach (DataGridColumn dataGridColumn in PropertiesGrid.Columns)
            {
                dataGridColumns.Add(dataGridColumn);
            }

            PropertiesGrid.Columns.Clear();

            dataGridColumns.Reverse();

            foreach (DataGridColumn dataGridColumn in dataGridColumns)
            {
                PropertiesGrid.Columns.Add(dataGridColumn);
            }
        }

        private void CellUpdated(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (e.EditAction == DataGridEditAction.Commit)
            {
                var s = e; 
            }
        }
    }

    public class SceneObjectComponentsList : Collection<ISceneObjectComponent>, ITypedList
    {
        public SceneObjectComponentsList(IList<ISceneObjectComponent> source) :base(source) { }
        public PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
        {
            return TypeDescriptor.GetProperties(Count > 0 ? this[0].GetType() : typeof(ISceneObjectComponent));
        }

        public string GetListName(PropertyDescriptor[] listAccessors)
        {
            return null;
        }
    }
}
